// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'dart:io';

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return FirebaseOptions(
          apiKey: Platform.environment['API_KEY_FIREBASE_ANDROID'] ?? dotenv.env['API_KEY_FIREBASE_ANDROID'] ?? '',
          appId: '1:763114190977:android:41c707acf6f02862aa3580',
          messagingSenderId: '763114190977',
          projectId: 'tree-72417',
          storageBucket: 'tree-72417.appspot.com',
        );
      case TargetPlatform.iOS:
        return FirebaseOptions(
          apiKey: Platform.environment['API_KEY_FIREBASE_IOS'] ?? dotenv.env['API_KEY_FIREBASE_IOS'] ?? '',
          appId: '1:763114190977:ios:42255e2bb9c9bae4aa3580',
          messagingSenderId: '763114190977',
          projectId: 'tree-72417',
          storageBucket: 'tree-72417.appspot.com',
          iosBundleId: 'com.tree.todo',
        );
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }
}
